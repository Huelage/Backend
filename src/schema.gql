# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Wallet {
  walletId: String!
  entity: Huelager!
  balance: Float!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Review {
  reviewId: String!
  vendor: Vendor!
  user: User!
  rating: Rating!
  date: DateTime!
  message: String!
}

enum Rating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

type WalletTransaction {
  transaction: Transaction!
}

type Transaction {
  transactionId: String!
  transactionType: TransactionType!
  amount: Float!
  status: TransactionStatus!
  description: String!
  paymentMethod: PaymentMethod!
  pgTransactionId: String!
  timestamp: DateTime!
  walletTransaction: WalletTransaction!
  order: Order!
}

enum TransactionType {
  TOP_UP
  WITHDRAWAL
}

enum TransactionStatus {
  COMPLETED
  PENDING
  FAILED
}

enum PaymentMethod {
  PAY_ON_DELIVERY
  WALLET_BALANCE
}

type CanceledOrder {
  order: Order!
  reason: String!
  refunded: Boolean!
}

type Food {
  product: Product!
  category: FoodCategory!
  pricingMethod: FoodPricing!
  portionPrice: Float
  minPrice: Float
  fixedPrice: Float
  availability: Availability!
  packagesSizes: JSON
  sides: JSON
}

enum FoodCategory {
  SNACKS
  DRINKS
  PROTEIN
  CARBOHYDRATE
}

enum FoodPricing {
  PRICE
  PORTION
  PACKAGE
  FIXED
}

enum Availability {
  AVAILABLE
  TEMPORARILY_UNAVAILABLE
  UNAVAILABLE
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Product {
  productId: String!
  vendor: Vendor!
  name: String!
  description: String!
  imgUrl: String!
  type: ProductType!
  food: Food!
  orderItem: OrderItem!
}

enum ProductType {
  FOOD
  BOOK
  STATIONERY
}

type OrderItem {
  orderItemnId: String!
  order: Order!
  product: Product!
  pricePerItem: Float!
  quantity: Float!
  extras: JSON
}

type Order {
  user: User!
  vendor: Vendor!
  transaction: Transaction!
  status: OrderStatus!
  deliveryAddress: String!
  subtotal: Float!
  deliveryFee: Float!
  totalAmount: Float!
  paymentMethod: PaymentMethod!
  paymentStatus: Boolean!
  createdAt: DateTime!
  canceledOrder: CanceledOrder!
  orderItems: [OrderItem!]!
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_DELIVERY
  DELIEVERED
}

type User {
  userId: String!
  entity: Huelager!
  firstName: String!
  lastName: String!
  isSocialAuth: Boolean!
  reviews: [Review!]
  orders: [Order!]
}

type Huelager {
  entityId: String!
  wallet: Wallet!
  email: String!
  phone: String!
  isVerified: Boolean!
  emailIsVerified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  entityType: HuelagerType!
  imgUrl: String
  refreshToken: String
  accessToken: String
  user: User
  vendor: Vendor
}

enum HuelagerType {
  VENDOR
  USER
}

type Vendor {
  vendorId: String!
  entity: Huelager!
  businessName: String!
  businessAddress: String!
  repName: String!
  openingHours: DateTime!
  closingHours: DateTime!
  reviews: [Review!]!
  products: [Product!]!
  orders: [Order!]!
}

type Query {
  sayHello: String!
}

type Mutation {
  signUpVendor(input: CreateVendorInput!): Vendor!
  signInVendor(input: AuthenticateVendorInput!): Vendor!
  signUpUser(input: CreateUserInput!): User!
  signInUser(input: AuthenticateUserInput!): User!
  updatePhone(input: UpdatePhoneInput!): Huelager!
  verifyPhoneOtp(input: VerifyPhoneInput!): Huelager!
  refreshAccessToken: String!
  generateRSAKey: String!
  requestEmailVerification(email: String!): String!
  uploadImage(input: UploadImageInput!): String!
  addFood(input: CreateFoodInput!): Product!
}

input CreateVendorInput {
  email: String!
  phone: String!
  password: String!
  confirmPassword: String!
  repName: String!
  businessName: String!
  businessAddress: String!
}

input AuthenticateVendorInput {
  entityId: String
  password: String!
  vendorKey: String
}

input CreateUserInput {
  email: String!
  phone: String!
  password: String!
  confirmPassword: String!
  firstName: String!
  lastName: String!
}

input AuthenticateUserInput {
  entityId: String
  password: String!
  email: String
}

input UpdatePhoneInput {
  phone: String!
  entityId: String!
}

input VerifyPhoneInput {
  phone: String!
  otp: Float!
}

input UploadImageInput {
  id: String!
  type: UploadLocation!
  image: Upload!
}

enum UploadLocation {
  ENTITY
  PRODUCT
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateFoodInput {
  name: String!
  description: String!
  category: FoodCategory!
  pricingMethod: FoodPricing!
  portionPrice: Float
  minPrice: Float
  fixedPrice: Float
  availability: Availability!
  packagesSizes: JSON
  sides: JSON
}